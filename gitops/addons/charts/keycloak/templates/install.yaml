---
apiVersion: v1
kind: Namespace
metadata:
  name: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: keycloak
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: keycloak
  name: keycloak
  namespace: keycloak
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - args:
            - start
          env:
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              value: "admin"
            # - name: KC_HOSTNAME
            #   valueFrom:
            #     configMapKeyRef:
            #       name: keycloak-config
            #       key: keycloak-url
            #       optional: true
            # - name: KC_HOSTNAME_ADMIN
            #   valueFrom:
            #     configMapKeyRef:
            #       name: keycloak-config
            #       key: keycloak-url
            #       optional: true
            - name: KEYCLOAK_LOGLEVEL
              value: ALL
            - name: QUARKUS_TRANSACTION_MANAGER_ENABLE_RECOVERY
              value: 'true'
          envFrom:
            - secretRef:
                name: keycloak-config
          image: quay.io/keycloak/keycloak:26.2.3
          name: keycloak
          ports:
            - containerPort: 8080
              name: http
          readinessProbe:
            httpGet:
              path: /keycloak/realms/master
              port: 8080
          volumeMounts:
            - mountPath: /opt/keycloak/conf
              name: keycloak-config
              readOnly: true
      volumes:
        - configMap:
            name: keycloak-config
          name: keycloak-config
---
apiVersion: v1
data:
  keycloak.conf: |
    # Database
    # The database vendor.
    db=postgres

    # The username of the database user.
    db-url=jdbc:postgresql://postgresql.keycloak.svc.cluster.local:5432/postgres

    # hostname settings
    hostname=https://{{ .Values.ingress_domain_name }}/keycloak
    hostname-admin=https://{{ .Values.ingress_domain_name }}/keycloak
    hostname-strict=true
    http-relative-path=keycloak
    http-enabled=true
    hostname-debug=true
    # .../keycloak/realms/platform/hostname-debug
    
    # Production mode settings
    cache=ispn
    cache-stack=kubernetes
    
    # Enable account console
    features=account3
    
    # Theme settings
    theme-cache-enabled=true

kind: ConfigMap
metadata:
  name: keycloak-config
  namespace: keycloak
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: keycloak
spec:
  clusterIP: None
  ports:
    - name: postgres
      port: 5432
  selector:
    app: postgresql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: keycloak
  annotations:
    argocd.argoproj.io/sync-wave: "6"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  serviceName: service-postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: keycloak-config
          image: docker.io/library/postgres:17.4-alpine3.21
          name: postgres
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgresdb
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 300Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      storageClassName: gp3
      accessModes: ["ReadWriteOnce"]
      volumeMode: Filesystem
      resources:
        requests:
          storage: "500Mi"
