apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  description: Deploys dev and prod clusters on EKS. Note - Repository will be created automatically if it doesn't exist.
  name: create-dev-and-prod-env
  title: Create Dev and Prod Environment
spec:
  owner: guest
  type: service
  parameters:
    - title: Configuration Options
      required:
        - name
      properties:
        name:
          title: Name of the component
          type: string
          description: Name for the dev and prod environment
          ui:autofocus: true
        namespace:
          default: flux-system
          title: Enter namespace within the EKS cluster to deploy this
          type: string
        aws_region:
          default: us-east-1
          title: Region
          type: string
        repoHostUrl:
          type: string
          default: d1vvjck0a1cre3.cloudfront.net
          ui:widget: hidden
        repoUsername:
          type: string
          default: user1
          ui:widget: hidden
        repoName:
          type: string
          default: platform-on-eks-workshop
          ui:widget: hidden
  steps:
    - action: fetch:template
      id: fetch-base
      input:
        url: ./templates-create-dev-and-prod-env/
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          aws_region: ${{ parameters.aws_region }}
          repoUrl: https://${{ parameters.repoHostUrl }}/${{ parameters.repoUsername }}
      name: Fetch Base
    - id: create-repo-job
      name: Create Repository via Kubernetes Job
      action: kubernetes:apply
      input:
        manifestPath: create-repo-job.yaml
        namespaced: true
        manifest:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: create-repo-${{ parameters.name }}-${{ '' | now | date('unix') }}
            namespace: backstage
          spec:
            ttlSecondsAfterFinished: 300
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: create-repo
                  image: amazon/aws-cli:latest
                  command:
                  - /bin/bash
                  - -c
                  - |
                    # Install required tools
                    yum update -y && yum install -y curl jq
                    
                    # Set environment variables
                    export GITLAB_URL="https://${{ parameters.repoHostUrl }}"
                    export GITLABPW="$GITLAB_PASSWORD"
                    export GIT_USERNAME="${{ parameters.repoUsername }}"
                    
                    # Create repository function
                    create_repository() {
                        local repo_name="$1"
                        echo "Creating repository: $repo_name"
                        
                        # Get CSRF token and login
                        local csrf_token=$(curl -k -s -c "/tmp/gitlab_cookies.txt" "$GITLAB_URL/users/sign_in" 2>/dev/null | grep -o 'csrf-token.*content="[^"]*"' | sed 's/.*content="\([^"]*\)".*/\1/' | head -1)
                        
                        if [ -z "$csrf_token" ]; then
                            echo "Failed to get CSRF token"
                            return 1
                        fi
                        
                        echo "Got CSRF token: ${csrf_token:0:10}..."
                        
                        # Login
                        curl -k -s -b "/tmp/gitlab_cookies.txt" -c "/tmp/gitlab_cookies.txt" \
                            -d "authenticity_token=$csrf_token" \
                            -d "user[login]=$GIT_USERNAME" \
                            -d "user[password]=$GITLABPW" \
                            -d "user[remember_me]=0" \
                            -X POST \
                            "$GITLAB_URL/users/sign_in" > /dev/null 2>&1
                        
                        # Get project CSRF token
                        local project_csrf=$(curl -k -s -b "/tmp/gitlab_cookies.txt" "$GITLAB_URL/projects/new" 2>/dev/null | grep -o 'csrf-token.*content="[^"]*"' | sed 's/.*content="\([^"]*\)".*/\1/' | head -1)
                        
                        if [ -n "$project_csrf" ]; then
                            echo "Got project CSRF token: ${project_csrf:0:10}..."
                            
                            # Create project
                            local result=$(curl -k -s -b "/tmp/gitlab_cookies.txt" \
                                -d "authenticity_token=$project_csrf" \
                                -d "project[name]=$repo_name" \
                                -d "project[path]=$repo_name" \
                                -d "project[description]=Repository created by Backstage template" \
                                -d "project[visibility_level]=10" \
                                -d "project[initialize_with_readme]=1" \
                                -X POST \
                                "$GITLAB_URL/projects" 2>/dev/null)
                            
                            if echo "$result" | grep -q "You are being.*redirected"; then
                                echo "Repository $repo_name created successfully!"
                                return 0
                            else
                                echo "Failed to create repository $repo_name"
                                return 1
                            fi
                        else
                            echo "Failed to get project creation CSRF token"
                            return 1
                        fi
                    }
                    
                    # Create the repository
                    create_repository "${{ parameters.name }}"
                  env:
                  - name: GITLAB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: gitlab-credentials
                        key: password
    - id: publish
      name: Publishing to GitLab repository
      action: publish:gitlab:merge-request
      input:
        repoUrl: ${{ parameters.repoHostUrl }}?repo=${{parameters.name}}&owner=${{ parameters.repoUsername }}
        title: Add new dev and prod environment - ${{parameters.name}}
        description: Create dev and prod clusters template
        sourcePath: .
        targetPath: .
        branchName: add-${{parameters.name}}-env
        removeSourceBranch: true
        commitAction: auto
    - id: create-argocd-app
      name: Create ArgoCD App
      action: cnoe:create-argocd-app
      input:
        appName: ${{parameters.name}}
        appNamespace: ${{parameters.namespace}}
        argoInstance: in-cluster
        projectName: default
        repoUrl: https://${{ parameters.repoHostUrl }}/${{ parameters.repoUsername }}/${{parameters.name}}
        path: "manifests"
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: 'catalog-info.yaml'
  output:
    links:
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      - title: View Merge Request
        icon: gitlab
        url: ${{ steps['publish'].output.mergeRequestUrl }}
